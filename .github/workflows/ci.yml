name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  frontend-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint

  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          
      - name: Install dependencies
        run: go mod download
        
      - name: Verify dependencies
        run: go mod verify
        
      - name: Run go vet
        run: go vet ./...
        
      - name: Run tests
        run: go test -v ./...

  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-lint, backend-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build and cache frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.dev
          push: false
          load: true
          tags: zebra-studio/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and cache backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile.dev
          push: false
          load: true
          tags: zebra-studio/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  terraform-deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.x

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1 # Assuming ap-northeast-1 as the target region

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ secrets.TFSTATE_S3_BUCKET }}" -backend-config="key=terraform.tfstate" -backend-config="region=ap-northeast-1" -backend-config="dynamodb_table=${{ secrets.TFSTATE_DYNAMODB_TABLE }}"

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve
